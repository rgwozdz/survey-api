{
  "stats": {
    "suites": 12,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2018-01-07T22:54:00.894Z",
    "end": "2018-01-07T22:54:01.148Z",
    "duration": 254,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "AnswerValidation tests",
        "suites": [
          {
            "title": "Test answerValidation",
            "suites": [],
            "tests": [
              {
                "title": "Requests without \"answer\" parameter should return 400 error",
                "fullTitle": "AnswerValidation tests Test answerValidation Requests without \"answer\" parameter should return 400 error",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
                "err": {},
                "isRoot": false,
                "uuid": "128735e1-0bb6-468a-826b-673f3a6e5134",
                "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Requests with multiple \"answer\" parameters as array should return 400 error",
                "fullTitle": "AnswerValidation tests Test answerValidation Requests with multiple \"answer\" parameters as array should return 400 error",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = ['bagels', 'donuts'];\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
                "err": {},
                "isRoot": false,
                "uuid": "cc1e7afe-4a09-4b61-afd0-6f03178cb865",
                "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Requests with invalid answers should return 400 error",
                "fullTitle": "AnswerValidation tests Test answerValidation Requests with invalid answers should return 400 error",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = 'goldfish';\nmock.req.session.questions = questions;\nmock.req.session.questionIndex = 2;\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
                "err": {},
                "isRoot": false,
                "uuid": "fcdf93ed-6bf0-4f33-a9a6-2b7584cbf7fd",
                "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Requests with matched should continue",
                "fullTitle": "AnswerValidation tests Test answerValidation Requests with matched should continue",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = 'dogs';\nmock.req.session.questions = questions;\nmock.req.session.questionIndex = 2;\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError).to.equal(null);",
                "err": {},
                "isRoot": false,
                "uuid": "d8fb4c0c-c368-4843-a5f8-985e63b185af",
                "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/answer-validation-spec.js",
            "uuid": "7e76c556-3107-4486-ade5-30b59ab27729",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/usr/src/test/answer-validation-spec.js",
            "passes": [
              {
                "title": "Requests without \"answer\" parameter should return 400 error",
                "fullTitle": "AnswerValidation tests Test answerValidation Requests without \"answer\" parameter should return 400 error",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
                "err": {},
                "isRoot": false,
                "uuid": "128735e1-0bb6-468a-826b-673f3a6e5134",
                "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Requests with multiple \"answer\" parameters as array should return 400 error",
                "fullTitle": "AnswerValidation tests Test answerValidation Requests with multiple \"answer\" parameters as array should return 400 error",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = ['bagels', 'donuts'];\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
                "err": {},
                "isRoot": false,
                "uuid": "cc1e7afe-4a09-4b61-afd0-6f03178cb865",
                "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Requests with invalid answers should return 400 error",
                "fullTitle": "AnswerValidation tests Test answerValidation Requests with invalid answers should return 400 error",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = 'goldfish';\nmock.req.session.questions = questions;\nmock.req.session.questionIndex = 2;\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
                "err": {},
                "isRoot": false,
                "uuid": "fcdf93ed-6bf0-4f33-a9a6-2b7584cbf7fd",
                "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Requests with matched should continue",
                "fullTitle": "AnswerValidation tests Test answerValidation Requests with matched should continue",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = 'dogs';\nmock.req.session.questions = questions;\nmock.req.session.questionIndex = 2;\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError).to.equal(null);",
                "err": {},
                "isRoot": false,
                "uuid": "d8fb4c0c-c368-4843-a5f8-985e63b185af",
                "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/answer-validation-spec.js",
        "uuid": "d2bcb1ad-3c3e-4804-a8f9-603d1eb4154f",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "AnswerValidation tests \"before all\" hook",
            "timedOut": false,
            "duration": 76,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connect(`mongodb://mongo-store/test_answer_validation`);\ndb = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error'));\ndb.once('open', function() {\n  createDatabase(db)\n    .then(result=>{\n      return getQuestions(db);\n    })\n    .then(result=>{\n      questions = result;\n      done();\n    })\n    .catch(err=>{\n      console.error(err);\n      done();\n      throw err;\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8193a74a-96bd-4a15-9e7e-a0a64613585f",
            "parentUUID": "d2bcb1ad-3c3e-4804-a8f9-603d1eb4154f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "AnswerValidation tests \"after all\" hook",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "db.dropDatabase(function(){\n  mongoose.connection.close(done);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "73156aee-b7d0-4cba-8f9f-dc19931e7b09",
            "parentUUID": "d2bcb1ad-3c3e-4804-a8f9-603d1eb4154f",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/usr/src/test/answer-validation-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "CreateSummary tests",
        "suites": [
          {
            "title": "Test createSummary",
            "suites": [],
            "tests": [
              {
                "title": "Should return an summary object array with right properties even though no req.session.questions",
                "fullTitle": "CreateSummary tests Test createSummary Should return an summary object array with right properties even though no req.session.questions",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\nreturn createSummary(mock.req)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('question').that.is.a('string');\n      expect(item).to.have.property('response').that.is.an('string');\n    })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b249cd77-c298-442a-a397-a76d90363057",
                "parentUUID": "1d2ae2ac-60d0-4c13-8417-6eccac6753ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return an summary object array with right properties given there is a req.session.questions",
                "fullTitle": "CreateSummary tests Test createSummary Should return an summary object array with right properties given there is a req.session.questions",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\n mock.req.session.questions = questions;\nreturn createSummary(mock.req)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('question').that.is.a('string');\n      expect(item).to.have.property('response').that.is.a('string');\n    })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "bfc02a7f-c742-4af4-8bcd-608b8562e5b5",
                "parentUUID": "1d2ae2ac-60d0-4c13-8417-6eccac6753ec",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/create-summary-spec.js",
            "uuid": "1d2ae2ac-60d0-4c13-8417-6eccac6753ec",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/usr/src/test/create-summary-spec.js",
            "passes": [
              {
                "title": "Should return an summary object array with right properties even though no req.session.questions",
                "fullTitle": "CreateSummary tests Test createSummary Should return an summary object array with right properties even though no req.session.questions",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\nreturn createSummary(mock.req)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('question').that.is.a('string');\n      expect(item).to.have.property('response').that.is.an('string');\n    })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b249cd77-c298-442a-a397-a76d90363057",
                "parentUUID": "1d2ae2ac-60d0-4c13-8417-6eccac6753ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return an summary object array with right properties given there is a req.session.questions",
                "fullTitle": "CreateSummary tests Test createSummary Should return an summary object array with right properties given there is a req.session.questions",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\n mock.req.session.questions = questions;\nreturn createSummary(mock.req)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('question').that.is.a('string');\n      expect(item).to.have.property('response').that.is.a('string');\n    })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "bfc02a7f-c742-4af4-8bcd-608b8562e5b5",
                "parentUUID": "1d2ae2ac-60d0-4c13-8417-6eccac6753ec",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 6,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/create-summary-spec.js",
        "uuid": "eda1a3d1-29eb-4f06-8f44-b4bf416a1d9a",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "CreateSummary tests \"before all\" hook",
            "timedOut": false,
            "duration": 16,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connect(`mongodb://mongo-store/test_next_redirects`);\ndb = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error'));\ndb.once('open', function() {\n  createDatabase(db)\n    .then(result=>{\n      return getQuestions(db);\n    })\n    .then(result=>{\n      questions = result;\n      done();\n    })\n    .catch(err=>{\n      console.error(err);\n      done();\n      throw err;\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "35217a82-690a-4b5a-a341-c997c1864c00",
            "parentUUID": "eda1a3d1-29eb-4f06-8f44-b4bf416a1d9a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "CreateSummary tests \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "db.dropDatabase(function(){\n  mongoose.connection.close(done);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f18187b8-0210-418e-a9eb-82827104c966",
            "parentUUID": "eda1a3d1-29eb-4f06-8f44-b4bf416a1d9a",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/usr/src/test/create-summary-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "End 2 end tests",
        "suites": [],
        "tests": [
          {
            "title": "GET /api/v1/start",
            "fullTitle": "End 2 end tests GET /api/v1/start",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let cookie;\n    testRequest(app)\n      .get('/api/v1/start')\n      .then(res=>{\n        // Test that the endpoint exists and responds with specified data\n        expect(res).to.have.property('status', 200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('label', \"Coffee or tea?\");\n        expect(res.body).to.have.property('answers').that.is.an('array');\n        cookie = res.header['set-cookie'][0].split('; ')[0];\n        return testRequest(app).get('/api/v1/next?answer=tea').set('Cookie', [cookie]);\n      })\n      .then(res=>{\n        // Test that the endpoint exists and responds with specified data\n        //console.log(res);\n        expect(res).to.have.property('status', 200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('label', \"Donuts or bagels?\");\n        expect(res.body).to.have.property('answers').that.is.an('array');\n        done();//return testRequest(app).get('/api/v1/next?answer=bagels').set('Cookie', [cookie]);\n      })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 200);\n      //   expect(res.body).to.be.an('object');\n      //   expect(res.body).to.have.property('label', \"Cats or dogs?\");\n      //   expect(res.body).to.have.property('answers').that.is.an('array');\n      //\n      //   return testRequest(app).get('/api/v1/next?answer=dogs').set('Cookie', [cookie]);\n      // })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 302);\n      //   expect(res.header.location).to.equal('/api/v1/summary');\n      //\n      //   done();//return testRequest(app).get('/api/v1/summary').set('Cookie', [cookie]);\n      // })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 200);\n      //   // res.body.forEach(item=>{\n      //   //   expect(item).to.have.property('question').that.is.a('string');\n      //   //   expect(item).to.have.property('response').that.is.a('string');\n      //   // })\n      //   done();\n      // })\n      .catch(err=>{\n        console.error(err);\n        expect(err === undefined).to.equal(true);\n        done();\n      });",
            "err": {},
            "isRoot": false,
            "uuid": "87997fce-e902-426e-b9b0-2a6a11b4de96",
            "parentUUID": "7330f2a8-5773-4e1e-865b-436da2a34842",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/end-2-end-spec.js",
        "uuid": "7330f2a8-5773-4e1e-865b-436da2a34842",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "End 2 end tests \"before all\" hook",
            "timedOut": false,
            "duration": 39,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connect(`mongodb://mongo-store/test_get_questions`);\ndb = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error'));\ndb.once('open', function() {\n  createDatabase(db)\n    .then(result=>{\n      // Get the express app\n      return appPromise();\n    })\n    .then((promisedApp) => {\n      app = promisedApp;\n      app.set('db', db);\n      done();\n    })\n    .catch(err=>{\n      console.error(err);\n      done();\n      throw err;\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "83723fcd-c23d-40bd-ad70-12082350562c",
            "parentUUID": "7330f2a8-5773-4e1e-865b-436da2a34842",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "End 2 end tests \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "db.dropDatabase(function(){\n  mongoose.connection.close(done);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8cd1b4b6-a147-4595-aa3f-4df75a97f499",
            "parentUUID": "7330f2a8-5773-4e1e-865b-436da2a34842",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/usr/src/test/end-2-end-spec.js",
        "passes": [
          {
            "title": "GET /api/v1/start",
            "fullTitle": "End 2 end tests GET /api/v1/start",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let cookie;\n    testRequest(app)\n      .get('/api/v1/start')\n      .then(res=>{\n        // Test that the endpoint exists and responds with specified data\n        expect(res).to.have.property('status', 200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('label', \"Coffee or tea?\");\n        expect(res.body).to.have.property('answers').that.is.an('array');\n        cookie = res.header['set-cookie'][0].split('; ')[0];\n        return testRequest(app).get('/api/v1/next?answer=tea').set('Cookie', [cookie]);\n      })\n      .then(res=>{\n        // Test that the endpoint exists and responds with specified data\n        //console.log(res);\n        expect(res).to.have.property('status', 200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('label', \"Donuts or bagels?\");\n        expect(res.body).to.have.property('answers').that.is.an('array');\n        done();//return testRequest(app).get('/api/v1/next?answer=bagels').set('Cookie', [cookie]);\n      })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 200);\n      //   expect(res.body).to.be.an('object');\n      //   expect(res.body).to.have.property('label', \"Cats or dogs?\");\n      //   expect(res.body).to.have.property('answers').that.is.an('array');\n      //\n      //   return testRequest(app).get('/api/v1/next?answer=dogs').set('Cookie', [cookie]);\n      // })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 302);\n      //   expect(res.header.location).to.equal('/api/v1/summary');\n      //\n      //   done();//return testRequest(app).get('/api/v1/summary').set('Cookie', [cookie]);\n      // })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 200);\n      //   // res.body.forEach(item=>{\n      //   //   expect(item).to.have.property('question').that.is.a('string');\n      //   //   expect(item).to.have.property('response').that.is.a('string');\n      //   // })\n      //   done();\n      // })\n      .catch(err=>{\n        console.error(err);\n        expect(err === undefined).to.equal(true);\n        done();\n      });",
            "err": {},
            "isRoot": false,
            "uuid": "87997fce-e902-426e-b9b0-2a6a11b4de96",
            "parentUUID": "7330f2a8-5773-4e1e-865b-436da2a34842",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 45,
        "rootEmpty": false
      },
      {
        "title": "GetQuestions tests",
        "suites": [
          {
            "title": "Test getQuestions",
            "suites": [],
            "tests": [
              {
                "title": "Should return an object array with right properties ",
                "fullTitle": "GetQuestions tests Test getQuestions Should return an object array with right properties ",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return getQuestions(db)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('label').that.is.a('string');\n      expect(item).to.have.property('answers').that.is.an('array');\n    })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f0c9cb9d-6cf7-432e-8d7b-2f2c6de05ff1",
                "parentUUID": "e8d28578-8f4e-4c55-9c8f-579278bae823",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/get-questions-spec.js",
            "uuid": "e8d28578-8f4e-4c55-9c8f-579278bae823",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/usr/src/test/get-questions-spec.js",
            "passes": [
              {
                "title": "Should return an object array with right properties ",
                "fullTitle": "GetQuestions tests Test getQuestions Should return an object array with right properties ",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return getQuestions(db)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('label').that.is.a('string');\n      expect(item).to.have.property('answers').that.is.an('array');\n    })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f0c9cb9d-6cf7-432e-8d7b-2f2c6de05ff1",
                "parentUUID": "e8d28578-8f4e-4c55-9c8f-579278bae823",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/get-questions-spec.js",
        "uuid": "229b09f8-273c-4663-adee-e520d03d7008",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "GetQuestions tests \"before all\" hook",
            "timedOut": false,
            "duration": 13,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connect(`mongodb://mongo-store/test_get_questions`);\ndb = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error'));\ndb.once('open', function() {\n  createDatabase(db)\n    .then(result=>{\n      done();\n    })\n    .catch(err=>{\n      console.error(err);\n      done();\n      throw err;\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "736622cf-32bc-4891-91a6-cecfc80ec705",
            "parentUUID": "229b09f8-273c-4663-adee-e520d03d7008",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "GetQuestions tests \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "db.dropDatabase(function(){\n  mongoose.connection.close(done);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9f1fd477-7127-429a-85f1-9de1ddb2da02",
            "parentUUID": "229b09f8-273c-4663-adee-e520d03d7008",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/usr/src/test/get-questions-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "NextRedirects tests",
        "suites": [
          {
            "title": "Test nextRedirects",
            "suites": [],
            "tests": [
              {
                "title": "Sessions with a question index of -1 should be sent to /api/v1/start",
                "fullTitle": "NextRedirects tests Test nextRedirects Sessions with a question index of -1 should be sent to /api/v1/start",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = -1;\nnextRedirects(mock.req, mock.res, mock.next);\nexpect(mock.redirectedPath).to.equal('/api/v1/start');",
                "err": {},
                "isRoot": false,
                "uuid": "73f1e697-25c2-4816-b4bf-b8bddf457dc4",
                "parentUUID": "e6a7f673-3faa-48d2-b011-3905abd00f0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Sessions with a question index of > total questions should be sent to /api/v1/summary",
                "fullTitle": "NextRedirects tests Test nextRedirects Sessions with a question index of > total questions should be sent to /api/v1/summary",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = questions.length;\nmock.req.session.questions = questions;\nnextRedirects(mock.req, mock.res, mock.next);\nexpect(mock.redirectedPath).to.equal('/api/v1/summary');",
                "err": {},
                "isRoot": false,
                "uuid": "14e51446-8294-4ede-a654-365331087c46",
                "parentUUID": "e6a7f673-3faa-48d2-b011-3905abd00f0a",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/next-redirects-spec.js",
            "uuid": "e6a7f673-3faa-48d2-b011-3905abd00f0a",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/usr/src/test/next-redirects-spec.js",
            "passes": [
              {
                "title": "Sessions with a question index of -1 should be sent to /api/v1/start",
                "fullTitle": "NextRedirects tests Test nextRedirects Sessions with a question index of -1 should be sent to /api/v1/start",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = -1;\nnextRedirects(mock.req, mock.res, mock.next);\nexpect(mock.redirectedPath).to.equal('/api/v1/start');",
                "err": {},
                "isRoot": false,
                "uuid": "73f1e697-25c2-4816-b4bf-b8bddf457dc4",
                "parentUUID": "e6a7f673-3faa-48d2-b011-3905abd00f0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Sessions with a question index of > total questions should be sent to /api/v1/summary",
                "fullTitle": "NextRedirects tests Test nextRedirects Sessions with a question index of > total questions should be sent to /api/v1/summary",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = questions.length;\nmock.req.session.questions = questions;\nnextRedirects(mock.req, mock.res, mock.next);\nexpect(mock.redirectedPath).to.equal('/api/v1/summary');",
                "err": {},
                "isRoot": false,
                "uuid": "14e51446-8294-4ede-a654-365331087c46",
                "parentUUID": "e6a7f673-3faa-48d2-b011-3905abd00f0a",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/next-redirects-spec.js",
        "uuid": "258dd24c-561b-4cf5-8a5c-a88806ce06a1",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "NextRedirects tests \"before all\" hook",
            "timedOut": false,
            "duration": 11,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connect(`mongodb://mongo-store/test_next_redirects`);\ndb = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error'));\ndb.once('open', function() {\n  createDatabase(db)\n    .then(result=>{\n      return getQuestions(db);\n    })\n    .then(result=>{\n      questions = result;\n      done();\n    })\n    .catch(err=>{\n      console.error(err);\n      done();\n      throw err;\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9a0e781f-7e25-4c47-8f37-cc1ca9b4f244",
            "parentUUID": "258dd24c-561b-4cf5-8a5c-a88806ce06a1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "NextRedirects tests \"after all\" hook",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "db.dropDatabase(function(){\n  mongoose.connection.close(done);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3ef74a41-87d4-4113-b0d6-7cb30a7febc4",
            "parentUUID": "258dd24c-561b-4cf5-8a5c-a88806ce06a1",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/usr/src/test/next-redirects-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "SessionUtils tests",
        "suites": [
          {
            "title": "Test sessionQuestionIndex",
            "suites": [],
            "tests": [
              {
                "title": "Sessions not yet assigned a questionIndex should get one equal to -1",
                "fullTitle": "SessionUtils tests Test sessionQuestionIndex Sessions not yet assigned a questionIndex should get one equal to -1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.req.session.questionIndex).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "9ccbca3a-695a-4882-a928-3b55d874bb7d",
                "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Sessions already assigned a questionIndex integer should keep it intact",
                "fullTitle": "SessionUtils tests Test sessionQuestionIndex Sessions already assigned a questionIndex integer should keep it intact",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = 1;\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.req.session.questionIndex).to.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "a0f13c17-8de3-4d4f-93e6-4e50dcd68847",
                "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get a 500 when session questionIndex is mutated to non-integer",
                "fullTitle": "SessionUtils tests Test sessionQuestionIndex Should get a 500 when session questionIndex is mutated to non-integer",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = 'LOL';\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "48211a9e-3f6f-43b6-a979-21d26a29b245",
                "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/session-utils-spec.js",
            "uuid": "24c62354-ec13-449a-83d8-a72c93bded12",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/usr/src/test/session-utils-spec.js",
            "passes": [
              {
                "title": "Sessions not yet assigned a questionIndex should get one equal to -1",
                "fullTitle": "SessionUtils tests Test sessionQuestionIndex Sessions not yet assigned a questionIndex should get one equal to -1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.req.session.questionIndex).to.equal(-1);",
                "err": {},
                "isRoot": false,
                "uuid": "9ccbca3a-695a-4882-a928-3b55d874bb7d",
                "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Sessions already assigned a questionIndex integer should keep it intact",
                "fullTitle": "SessionUtils tests Test sessionQuestionIndex Sessions already assigned a questionIndex integer should keep it intact",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = 1;\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.req.session.questionIndex).to.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "a0f13c17-8de3-4d4f-93e6-4e50dcd68847",
                "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get a 500 when session questionIndex is mutated to non-integer",
                "fullTitle": "SessionUtils tests Test sessionQuestionIndex Should get a 500 when session questionIndex is mutated to non-integer",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = 'LOL';\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(500);",
                "err": {},
                "isRoot": false,
                "uuid": "48211a9e-3f6f-43b6-a979-21d26a29b245",
                "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "Test sessionQuestions",
            "suites": [],
            "tests": [
              {
                "title": "Should create a questions property on the req.session object that is an object array with right properties ",
                "fullTitle": "SessionUtils tests Test sessionQuestions Should create a questions property on the req.session object that is an object array with right properties ",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\nreturn sesstionUtils.sessionQuestions(mock.req)\n  .then(result => {\n    expect(mock.req.session).to.have.property('questions').that.is.an('array');\n    mock.req.session.questions.forEach(item => {\n      expect(item).to.have.property('label').that.is.a('string');\n      expect(item).to.have.property('answers').that.is.an('array');\n    })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a8b8def9-1363-49e4-af13-85ebdd65c147",
                "parentUUID": "5b211887-048a-4ce9-a7fe-6a10579408f2",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/session-utils-spec.js",
            "uuid": "5b211887-048a-4ce9-a7fe-6a10579408f2",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/usr/src/test/session-utils-spec.js",
            "passes": [
              {
                "title": "Should create a questions property on the req.session object that is an object array with right properties ",
                "fullTitle": "SessionUtils tests Test sessionQuestions Should create a questions property on the req.session object that is an object array with right properties ",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\nreturn sesstionUtils.sessionQuestions(mock.req)\n  .then(result => {\n    expect(mock.req.session).to.have.property('questions').that.is.an('array');\n    mock.req.session.questions.forEach(item => {\n      expect(item).to.have.property('label').that.is.a('string');\n      expect(item).to.have.property('answers').that.is.an('array');\n    })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a8b8def9-1363-49e4-af13-85ebdd65c147",
                "parentUUID": "5b211887-048a-4ce9-a7fe-6a10579408f2",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/session-utils-spec.js",
        "uuid": "319c97d0-9a78-44c6-a804-5afa16a4a5e2",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "SessionUtils tests \"before all\" hook",
            "timedOut": false,
            "duration": 11,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connect(`mongodb://mongo-store/test_get_questions`);\ndb = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error'));\ndb.once('open', function() {\n  createDatabase(db)\n    .then(result=>{\n      done();\n    })\n    .catch(err=>{\n      console.error(err);\n      done();\n      throw err;\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "843b7c68-490b-4c62-8521-1ce296d8868e",
            "parentUUID": "319c97d0-9a78-44c6-a804-5afa16a4a5e2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "SessionUtils tests \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "db.dropDatabase(function(){\n  mongoose.connection.close(done);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b7f1a31f-a30d-41ba-8313-27c555c5e235",
            "parentUUID": "319c97d0-9a78-44c6-a804-5afa16a4a5e2",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/usr/src/test/session-utils-spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "8c2a6d7c-c75b-470e-bc15-5fb6e072d04d",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Requests without \"answer\" parameter should return 400 error",
      "fullTitle": "Test answerValidation Requests without \"answer\" parameter should return 400 error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
      "err": {},
      "isRoot": false,
      "uuid": "128735e1-0bb6-468a-826b-673f3a6e5134",
      "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Requests with multiple \"answer\" parameters as array should return 400 error",
      "fullTitle": "Test answerValidation Requests with multiple \"answer\" parameters as array should return 400 error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = ['bagels', 'donuts'];\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
      "err": {},
      "isRoot": false,
      "uuid": "cc1e7afe-4a09-4b61-afd0-6f03178cb865",
      "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Requests with invalid answers should return 400 error",
      "fullTitle": "Test answerValidation Requests with invalid answers should return 400 error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = 'goldfish';\nmock.req.session.questions = questions;\nmock.req.session.questionIndex = 2;\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
      "err": {},
      "isRoot": false,
      "uuid": "fcdf93ed-6bf0-4f33-a9a6-2b7584cbf7fd",
      "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Requests with matched should continue",
      "fullTitle": "Test answerValidation Requests with matched should continue",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = 'dogs';\nmock.req.session.questions = questions;\nmock.req.session.questionIndex = 2;\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError).to.equal(null);",
      "err": {},
      "isRoot": false,
      "uuid": "d8fb4c0c-c368-4843-a5f8-985e63b185af",
      "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should return an summary object array with right properties even though no req.session.questions",
      "fullTitle": "Test createSummary Should return an summary object array with right properties even though no req.session.questions",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\nreturn createSummary(mock.req)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('question').that.is.a('string');\n      expect(item).to.have.property('response').that.is.an('string');\n    })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "b249cd77-c298-442a-a397-a76d90363057",
      "parentUUID": "1d2ae2ac-60d0-4c13-8417-6eccac6753ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should return an summary object array with right properties given there is a req.session.questions",
      "fullTitle": "Test createSummary Should return an summary object array with right properties given there is a req.session.questions",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\n mock.req.session.questions = questions;\nreturn createSummary(mock.req)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('question').that.is.a('string');\n      expect(item).to.have.property('response').that.is.a('string');\n    })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "bfc02a7f-c742-4af4-8bcd-608b8562e5b5",
      "parentUUID": "1d2ae2ac-60d0-4c13-8417-6eccac6753ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "GET /api/v1/start",
      "fullTitle": "End 2 end tests GET /api/v1/start",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let cookie;\n    testRequest(app)\n      .get('/api/v1/start')\n      .then(res=>{\n        // Test that the endpoint exists and responds with specified data\n        expect(res).to.have.property('status', 200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('label', \"Coffee or tea?\");\n        expect(res.body).to.have.property('answers').that.is.an('array');\n        cookie = res.header['set-cookie'][0].split('; ')[0];\n        return testRequest(app).get('/api/v1/next?answer=tea').set('Cookie', [cookie]);\n      })\n      .then(res=>{\n        // Test that the endpoint exists and responds with specified data\n        //console.log(res);\n        expect(res).to.have.property('status', 200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('label', \"Donuts or bagels?\");\n        expect(res.body).to.have.property('answers').that.is.an('array');\n        done();//return testRequest(app).get('/api/v1/next?answer=bagels').set('Cookie', [cookie]);\n      })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 200);\n      //   expect(res.body).to.be.an('object');\n      //   expect(res.body).to.have.property('label', \"Cats or dogs?\");\n      //   expect(res.body).to.have.property('answers').that.is.an('array');\n      //\n      //   return testRequest(app).get('/api/v1/next?answer=dogs').set('Cookie', [cookie]);\n      // })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 302);\n      //   expect(res.header.location).to.equal('/api/v1/summary');\n      //\n      //   done();//return testRequest(app).get('/api/v1/summary').set('Cookie', [cookie]);\n      // })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 200);\n      //   // res.body.forEach(item=>{\n      //   //   expect(item).to.have.property('question').that.is.a('string');\n      //   //   expect(item).to.have.property('response').that.is.a('string');\n      //   // })\n      //   done();\n      // })\n      .catch(err=>{\n        console.error(err);\n        expect(err === undefined).to.equal(true);\n        done();\n      });",
      "err": {},
      "isRoot": false,
      "uuid": "87997fce-e902-426e-b9b0-2a6a11b4de96",
      "parentUUID": "7330f2a8-5773-4e1e-865b-436da2a34842",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should return an object array with right properties ",
      "fullTitle": "Test getQuestions Should return an object array with right properties ",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return getQuestions(db)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('label').that.is.a('string');\n      expect(item).to.have.property('answers').that.is.an('array');\n    })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "f0c9cb9d-6cf7-432e-8d7b-2f2c6de05ff1",
      "parentUUID": "e8d28578-8f4e-4c55-9c8f-579278bae823",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Sessions with a question index of -1 should be sent to /api/v1/start",
      "fullTitle": "Test nextRedirects Sessions with a question index of -1 should be sent to /api/v1/start",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = -1;\nnextRedirects(mock.req, mock.res, mock.next);\nexpect(mock.redirectedPath).to.equal('/api/v1/start');",
      "err": {},
      "isRoot": false,
      "uuid": "73f1e697-25c2-4816-b4bf-b8bddf457dc4",
      "parentUUID": "e6a7f673-3faa-48d2-b011-3905abd00f0a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Sessions with a question index of > total questions should be sent to /api/v1/summary",
      "fullTitle": "Test nextRedirects Sessions with a question index of > total questions should be sent to /api/v1/summary",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = questions.length;\nmock.req.session.questions = questions;\nnextRedirects(mock.req, mock.res, mock.next);\nexpect(mock.redirectedPath).to.equal('/api/v1/summary');",
      "err": {},
      "isRoot": false,
      "uuid": "14e51446-8294-4ede-a654-365331087c46",
      "parentUUID": "e6a7f673-3faa-48d2-b011-3905abd00f0a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Sessions not yet assigned a questionIndex should get one equal to -1",
      "fullTitle": "Test sessionQuestionIndex Sessions not yet assigned a questionIndex should get one equal to -1",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.req.session.questionIndex).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "9ccbca3a-695a-4882-a928-3b55d874bb7d",
      "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Sessions already assigned a questionIndex integer should keep it intact",
      "fullTitle": "Test sessionQuestionIndex Sessions already assigned a questionIndex integer should keep it intact",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = 1;\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.req.session.questionIndex).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "a0f13c17-8de3-4d4f-93e6-4e50dcd68847",
      "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should get a 500 when session questionIndex is mutated to non-integer",
      "fullTitle": "Test sessionQuestionIndex Should get a 500 when session questionIndex is mutated to non-integer",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = 'LOL';\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "48211a9e-3f6f-43b6-a979-21d26a29b245",
      "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should create a questions property on the req.session object that is an object array with right properties ",
      "fullTitle": "Test sessionQuestions Should create a questions property on the req.session object that is an object array with right properties ",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\nreturn sesstionUtils.sessionQuestions(mock.req)\n  .then(result => {\n    expect(mock.req.session).to.have.property('questions').that.is.an('array');\n    mock.req.session.questions.forEach(item => {\n      expect(item).to.have.property('label').that.is.a('string');\n      expect(item).to.have.property('answers').that.is.an('array');\n    })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "a8b8def9-1363-49e4-af13-85ebdd65c147",
      "parentUUID": "5b211887-048a-4ce9-a7fe-6a10579408f2",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Requests without \"answer\" parameter should return 400 error",
      "fullTitle": "Test answerValidation Requests without \"answer\" parameter should return 400 error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
      "err": {},
      "isRoot": false,
      "uuid": "128735e1-0bb6-468a-826b-673f3a6e5134",
      "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Requests with multiple \"answer\" parameters as array should return 400 error",
      "fullTitle": "Test answerValidation Requests with multiple \"answer\" parameters as array should return 400 error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = ['bagels', 'donuts'];\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
      "err": {},
      "isRoot": false,
      "uuid": "cc1e7afe-4a09-4b61-afd0-6f03178cb865",
      "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Requests with invalid answers should return 400 error",
      "fullTitle": "Test answerValidation Requests with invalid answers should return 400 error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = 'goldfish';\nmock.req.session.questions = questions;\nmock.req.session.questionIndex = 2;\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(400);",
      "err": {},
      "isRoot": false,
      "uuid": "fcdf93ed-6bf0-4f33-a9a6-2b7584cbf7fd",
      "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Requests with matched should continue",
      "fullTitle": "Test answerValidation Requests with matched should continue",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.query.answer = 'dogs';\nmock.req.session.questions = questions;\nmock.req.session.questionIndex = 2;\nanswerValidation(mock.req, mock.res, mock.next);\nexpect(mock.testError).to.equal(null);",
      "err": {},
      "isRoot": false,
      "uuid": "d8fb4c0c-c368-4843-a5f8-985e63b185af",
      "parentUUID": "7e76c556-3107-4486-ade5-30b59ab27729",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should return an summary object array with right properties even though no req.session.questions",
      "fullTitle": "Test createSummary Should return an summary object array with right properties even though no req.session.questions",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\nreturn createSummary(mock.req)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('question').that.is.a('string');\n      expect(item).to.have.property('response').that.is.an('string');\n    })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "b249cd77-c298-442a-a397-a76d90363057",
      "parentUUID": "1d2ae2ac-60d0-4c13-8417-6eccac6753ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should return an summary object array with right properties given there is a req.session.questions",
      "fullTitle": "Test createSummary Should return an summary object array with right properties given there is a req.session.questions",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\n mock.req.session.questions = questions;\nreturn createSummary(mock.req)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('question').that.is.a('string');\n      expect(item).to.have.property('response').that.is.a('string');\n    })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "bfc02a7f-c742-4af4-8bcd-608b8562e5b5",
      "parentUUID": "1d2ae2ac-60d0-4c13-8417-6eccac6753ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "GET /api/v1/start",
      "fullTitle": "End 2 end tests GET /api/v1/start",
      "timedOut": false,
      "duration": 45,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let cookie;\n    testRequest(app)\n      .get('/api/v1/start')\n      .then(res=>{\n        // Test that the endpoint exists and responds with specified data\n        expect(res).to.have.property('status', 200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('label', \"Coffee or tea?\");\n        expect(res.body).to.have.property('answers').that.is.an('array');\n        cookie = res.header['set-cookie'][0].split('; ')[0];\n        return testRequest(app).get('/api/v1/next?answer=tea').set('Cookie', [cookie]);\n      })\n      .then(res=>{\n        // Test that the endpoint exists and responds with specified data\n        //console.log(res);\n        expect(res).to.have.property('status', 200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('label', \"Donuts or bagels?\");\n        expect(res.body).to.have.property('answers').that.is.an('array');\n        done();//return testRequest(app).get('/api/v1/next?answer=bagels').set('Cookie', [cookie]);\n      })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 200);\n      //   expect(res.body).to.be.an('object');\n      //   expect(res.body).to.have.property('label', \"Cats or dogs?\");\n      //   expect(res.body).to.have.property('answers').that.is.an('array');\n      //\n      //   return testRequest(app).get('/api/v1/next?answer=dogs').set('Cookie', [cookie]);\n      // })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 302);\n      //   expect(res.header.location).to.equal('/api/v1/summary');\n      //\n      //   done();//return testRequest(app).get('/api/v1/summary').set('Cookie', [cookie]);\n      // })\n      // .then(res=>{\n      //   // Test that the endpoint exists and responds with specified data\n      //   expect(res).to.have.property('status', 200);\n      //   // res.body.forEach(item=>{\n      //   //   expect(item).to.have.property('question').that.is.a('string');\n      //   //   expect(item).to.have.property('response').that.is.a('string');\n      //   // })\n      //   done();\n      // })\n      .catch(err=>{\n        console.error(err);\n        expect(err === undefined).to.equal(true);\n        done();\n      });",
      "err": {},
      "isRoot": false,
      "uuid": "87997fce-e902-426e-b9b0-2a6a11b4de96",
      "parentUUID": "7330f2a8-5773-4e1e-865b-436da2a34842",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should return an object array with right properties ",
      "fullTitle": "Test getQuestions Should return an object array with right properties ",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return getQuestions(db)\n  .then(result=>{\n    expect(result).to.be.an('array');\n    result.forEach(item=>{\n      expect(item).to.have.property('label').that.is.a('string');\n      expect(item).to.have.property('answers').that.is.an('array');\n    })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "f0c9cb9d-6cf7-432e-8d7b-2f2c6de05ff1",
      "parentUUID": "e8d28578-8f4e-4c55-9c8f-579278bae823",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Sessions with a question index of -1 should be sent to /api/v1/start",
      "fullTitle": "Test nextRedirects Sessions with a question index of -1 should be sent to /api/v1/start",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = -1;\nnextRedirects(mock.req, mock.res, mock.next);\nexpect(mock.redirectedPath).to.equal('/api/v1/start');",
      "err": {},
      "isRoot": false,
      "uuid": "73f1e697-25c2-4816-b4bf-b8bddf457dc4",
      "parentUUID": "e6a7f673-3faa-48d2-b011-3905abd00f0a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Sessions with a question index of > total questions should be sent to /api/v1/summary",
      "fullTitle": "Test nextRedirects Sessions with a question index of > total questions should be sent to /api/v1/summary",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = questions.length;\nmock.req.session.questions = questions;\nnextRedirects(mock.req, mock.res, mock.next);\nexpect(mock.redirectedPath).to.equal('/api/v1/summary');",
      "err": {},
      "isRoot": false,
      "uuid": "14e51446-8294-4ede-a654-365331087c46",
      "parentUUID": "e6a7f673-3faa-48d2-b011-3905abd00f0a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Sessions not yet assigned a questionIndex should get one equal to -1",
      "fullTitle": "Test sessionQuestionIndex Sessions not yet assigned a questionIndex should get one equal to -1",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.req.session.questionIndex).to.equal(-1);",
      "err": {},
      "isRoot": false,
      "uuid": "9ccbca3a-695a-4882-a928-3b55d874bb7d",
      "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Sessions already assigned a questionIndex integer should keep it intact",
      "fullTitle": "Test sessionQuestionIndex Sessions already assigned a questionIndex integer should keep it intact",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = 1;\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.req.session.questionIndex).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "a0f13c17-8de3-4d4f-93e6-4e50dcd68847",
      "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should get a 500 when session questionIndex is mutated to non-integer",
      "fullTitle": "Test sessionQuestionIndex Should get a 500 when session questionIndex is mutated to non-integer",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.session.questionIndex = 'LOL';\nsesstionUtils.sessionQuestionIndex(mock.req, mock.res, mock.next);\nexpect(mock.testError.status).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "48211a9e-3f6f-43b6-a979-21d26a29b245",
      "parentUUID": "24c62354-ec13-449a-83d8-a72c93bded12",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should create a questions property on the req.session object that is an object array with right properties ",
      "fullTitle": "Test sessionQuestions Should create a questions property on the req.session object that is an object array with right properties ",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const mock = new MiddlewareMock();\nmock.req.app.set('db', db);\nreturn sesstionUtils.sessionQuestions(mock.req)\n  .then(result => {\n    expect(mock.req.session).to.have.property('questions').that.is.an('array');\n    mock.req.session.questions.forEach(item => {\n      expect(item).to.have.property('label').that.is.a('string');\n      expect(item).to.have.property('answers').that.is.an('array');\n    })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "a8b8def9-1363-49e4-af13-85ebdd65c147",
      "parentUUID": "5b211887-048a-4ce9-a7fe-6a10579408f2",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}